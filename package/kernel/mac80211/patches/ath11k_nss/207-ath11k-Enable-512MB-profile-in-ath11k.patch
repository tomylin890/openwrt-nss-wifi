From 1b402e444ff99efe84d09a084b96c39826783a8e Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <rgnanase@codeaurora.org>
Date: Thu, 10 Sep 2020 13:33:55 +0530
Subject: [PATCH] ath11k: Enable 512MB profile in ath11k

Below changes are made to enable 512MB mem mode in ath11k
        * Makefile changes to implement compilation flag when
                512MB mem profile is configured.
        * Enabling 512MB mem profile by default from Makefile
                for IPQ5018. This can be removed later once
                512MB profile config is supported.
        * Update target_mem_mode, number of stations, peer and vap
                during compile time

Signed-off-by: Ramya Gnanasekar <rgnanase@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/Kconfig |  7 +++++++
 drivers/net/wireless/ath/ath11k/hw.h    | 14 +++++++++++---
 drivers/net/wireless/ath/ath11k/qmi.c   |  2 +-
 drivers/net/wireless/ath/ath11k/qmi.h   |  6 +++++-
 4 files changed, 24 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/Kconfig
+++ b/drivers/net/wireless/ath/ath11k/Kconfig
@@ -23,6 +23,13 @@ config ATH11K_NSS_SUPPORT
 
 	  If unsure, say Y to enable NSS offload support.
 
+config ATH11K_MEM_PROFILE_512M
+	bool "ath11k enable 512MB memory profile"
+	depends on ATH11K
+	default n
+	---help---
+	Enables 512MB memory profile for ath11k
+
 config ATH11K_AHB
 	tristate "Atheros ath11k AHB support"
 	depends on m
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -11,11 +11,30 @@
 #include "wmi.h"
 
 /* Target configuration defines */
+#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
 
+#define TARGET_NUM_VDEVS(ab)	8
+#define TARGET_NUM_PEERS_PDEV(ab)	(128 + TARGET_NUM_VDEVS(ab))
+/* Max num of stations (per radio) */
+#define TARGET_NUM_STATIONS(ab)	128
+#define ATH11K_QMI_TARGET_MEM_MODE	ATH11K_QMI_TARGET_MEM_MODE_512M
+#define ATH11K_DP_TX_COMP_RING_SIZE	8192
+#define ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE	512
+#define ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE	128
+#define ATH11K_DP_RXDMA_MONITOR_DST_RING_SIZE	128
+#else
 /* Num VDEVS per radio */
 #define TARGET_NUM_VDEVS(ab)	(ab->hw_params.num_vdevs)
 
 #define TARGET_NUM_PEERS_PDEV(ab) (ab->hw_params.num_peers + TARGET_NUM_VDEVS(ab))
+/* Max num of stations (per radio) */
+#define TARGET_NUM_STATIONS(ab) (ab->hw_params.num_peers)
+#define ATH11K_QMI_TARGET_MEM_MODE		ATH11K_QMI_TARGET_MEM_MODE_DEFAULT
+#define ATH11K_DP_TX_COMP_RING_SIZE		32768
+#define ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE	1024
+#define ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE	4096
+#define ATH11K_DP_RXDMA_MONITOR_DST_RING_SIZE	2048
+#endif
 
 /* Num of peers for Single Radio mode */
 #define TARGET_NUM_PEERS_SINGLE(ab) (TARGET_NUM_PEERS_PDEV(ab))
@@ -26,9 +45,6 @@
 /* Num of peers for DBS_SBS */
 #define TARGET_NUM_PEERS_DBS_SBS(ab)	(3 * TARGET_NUM_PEERS_PDEV(ab))
 
-/* Max num of stations (per radio) */
-#define TARGET_NUM_STATIONS(ab)	(ab->hw_params.num_peers)
-
 #define TARGET_NUM_PEERS(ab, x)	TARGET_NUM_PEERS_##x(ab)
 #define TARGET_NUM_PEER_KEYS	2
 #define TARGET_NUM_TIDS(ab, x)	(2 * TARGET_NUM_PEERS(ab, x) +	\
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -29,6 +29,12 @@
 #define ATH11K_QMI_BDF_EXT_STR_LENGTH		0x20
 #define ATH11K_QMI_FW_MEM_REQ_SEGMENT_CNT	5
 
+#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
+#define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x4E800000
+#else
+#define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x51000000
+#endif
+
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
 #define QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01	0x003E
@@ -519,4 +525,10 @@ int ath11k_qmi_init_service(struct ath11
 void ath11k_qmi_free_resource(struct ath11k_base *ab);
 int ath11k_qmi_fwreset_from_cold_boot(struct ath11k_base *ab);
 
+enum ath11k_target_mem_mode {
+  ATH11K_QMI_TARGET_MEM_MODE_DEFAULT = 0,
+  ATH11K_QMI_TARGET_MEM_MODE_512M,
+  ATH11K_QMI_TARGET_MEM_MODE_256M,
+};
+
 #endif
--- a/local-symbols
+++ b/local-symbols
@@ -171,6 +171,7 @@ ATH11K=
 ATH11K_AHB=
 ATH11K_PCI=
 ATH11K_NSS_SUPPORT=
+ATH11K_MEM_PROFILE_512M=
 ATH11K_DEBUG=
 ATH11K_DEBUGFS=
 ATH11K_TRACING=
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -863,6 +863,11 @@ struct ath11k_msi_config {
 	u16 hw_rev;
 };
 
+struct ath11k_num_vdevs_peers {
+  u32 num_vdevs;
+  u32 num_peers;
+};
+
 /* Master structure to hold the hw data which may be used in core module */
 struct ath11k_base {
 	enum ath11k_hw_rev hw_rev;
@@ -1016,6 +1021,9 @@ struct ath11k_base {
 	} testmode;
 #endif
 
+	atomic_t num_max_allowed;
+	struct ath11k_num_vdevs_peers *num_vdevs_peers;
+
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
 };
--- a/drivers/net/wireless/ath/ath11k/dp.h
+++ b/drivers/net/wireless/ath/ath11k/dp.h
@@ -206,8 +206,9 @@ struct ath11k_pdev_dp {
 #define DP_WBM_RELEASE_RING_SIZE	64
 #define DP_TCL_DATA_RING_SIZE		512
 #define DP_TCL_DATA_RING_SIZE_WCN6750	2048
-#define DP_TX_COMP_RING_SIZE		32768
+#define DP_TX_COMP_RING_SIZE		ATH11K_DP_TX_COMP_RING_SIZE
 #define DP_TX_IDR_SIZE			DP_TX_COMP_RING_SIZE
+#define DP_TX_COMP_MAX_ALLOWED         DP_TX_COMP_RING_SIZE
 #define DP_TCL_CMD_RING_SIZE		32
 #define DP_TCL_STATUS_RING_SIZE		32
 #define DP_REO_DST_RING_MAX		4
@@ -220,9 +221,9 @@ struct ath11k_pdev_dp {
 #define DP_RXDMA_BUF_RING_SIZE		4096
 #define DP_RXDMA_REFILL_RING_SIZE	2048
 #define DP_RXDMA_ERR_DST_RING_SIZE	1024
-#define DP_RXDMA_MON_STATUS_RING_SIZE	1024
-#define DP_RXDMA_MONITOR_BUF_RING_SIZE	4096
-#define DP_RXDMA_MONITOR_DST_RING_SIZE	2048
+#define DP_RXDMA_MON_STATUS_RING_SIZE	ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE
+#define DP_RXDMA_MONITOR_BUF_RING_SIZE	ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE
+#define DP_RXDMA_MONITOR_DST_RING_SIZE	ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE
 #define DP_RXDMA_MONITOR_DESC_RING_SIZE	4096
 
 #define DP_RX_RELEASE_RING_NUM	3
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -265,6 +265,7 @@ tcl_ring_sel:
 			skb->data, skb->len);
 
 	atomic_inc(&ar->dp.num_tx_pending);
+	atomic_inc(&ab->num_max_allowed);
 
 	return 0;
 
@@ -309,6 +310,7 @@ static void ath11k_dp_tx_free_txbuf(stru
 	ar = ab->pdevs[mac_id].ar;
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 		wake_up(&ar->dp.tx_empty_waitq);
+	atomic_dec(&ab->num_max_allowed);
 }
 
 static void
@@ -342,6 +344,7 @@ ath11k_dp_tx_htt_tx_complete_buf(struct
 
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 		wake_up(&ar->dp.tx_empty_waitq);
+	atomic_dec(&ab->num_max_allowed);
 
 	dma_unmap_single(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE);
 
@@ -769,6 +772,7 @@ void ath11k_dp_tx_completion_handler(str
 			wake_up(&ar->dp.tx_empty_waitq);
 
 		ath11k_dp_tx_complete_msdu(ar, msdu, &ts);
+		atomic_dec(&ab->num_max_allowed);
 	}
 }
 
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -9,6 +9,7 @@
 #include <linux/remoteproc.h>
 #include <linux/firmware.h>
 #include <linux/of.h>
+#include <linux/of_platform.h>
 
 #include "core.h"
 #include "dp_tx.h"
@@ -16,6 +17,7 @@
 #include "debug.h"
 #include "hif.h"
 #include "wow.h"
+#include "ahb.h"
 
 unsigned int nss_offload;
 #ifdef CPTCFG_ATH11K_NSS_SUPPORT
@@ -35,13 +37,16 @@ MODULE_PARM_DESC(crypto_mode, "crypto mo
 /* frame mode values are mapped as per enum ath11k_hw_txrx_mode */
 unsigned int ath11k_frame_mode = ATH11K_HW_TXRX_NATIVE_WIFI;
 module_param_named(frame_mode, ath11k_frame_mode, uint, 0644);
-MODULE_PARM_DESC(frame_mode,
-		 "Datapath frame mode (0: raw, 1: native wifi (default), 2: ethernet)");
+MODULE_PARM_DESC(
+	frame_mode,
+	"Datapath frame mode (0: raw, 1: native wifi (default), 2: ethernet)");
 
 bool ath11k_ftm_mode;
 module_param_named(ftm_mode, ath11k_ftm_mode, bool, 0444);
 MODULE_PARM_DESC(ftm_mode, "Boots up in factory test mode");
 
+static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[];
+
 static struct ath11k_hw_params ath11k_hw_params[] = {
 	{
 		.hw_rev = ATH11K_HW_IPQ8074,
@@ -177,7 +182,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = true,
 		.coldboot_cal_ftm = true,
 		.cbcal_restart_fw = true,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = false,
@@ -259,7 +264,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -426,7 +431,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -509,7 +514,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -593,7 +598,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = true,
 		.coldboot_cal_ftm = true,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = false,
@@ -672,7 +677,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_monitor = false,
 		.supports_sta_ps = false,
 		.supports_shadow_regs = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_regdb = false,
@@ -710,7 +715,23 @@ static struct ath11k_hw_params ath11k_hw
 	},
 };
 
-static inline struct ath11k_pdev *ath11k_core_get_single_pdev(struct ath11k_base *ab)
+static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[] = {
+	{
+		.num_vdevs = (16 + 1),
+		.num_peers = 512,
+	},
+	{
+		.num_vdevs = (8 + 1),
+		.num_peers = 128,
+	},
+	{
+		.num_vdevs = 8,
+		.num_peers = 128,
+	},
+};
+
+static inline struct ath11k_pdev *
+ath11k_core_get_single_pdev(struct ath11k_base *ab)
 {
 	WARN_ON(!ab->hw_params.single_pdev_only);
 
@@ -794,8 +815,10 @@ int ath11k_core_suspend(struct ath11k_ba
 
 	ret = ath11k_dp_rx_pktlog_stop(ab, true);
 	if (ret) {
-		ath11k_warn(ab, "failed to stop dp rx (and timer) pktlog during suspend: %d\n",
-			    ret);
+		ath11k_warn(
+			ab,
+			"failed to stop dp rx (and timer) pktlog during suspend: %d\n",
+			ret);
 		return ret;
 	}
 
@@ -807,13 +830,15 @@ int ath11k_core_suspend(struct ath11k_ba
 
 	ret = ath11k_wow_enable(ab);
 	if (ret) {
-		ath11k_warn(ab, "failed to enable wow during suspend: %d\n", ret);
+		ath11k_warn(ab, "failed to enable wow during suspend: %d\n",
+			    ret);
 		return ret;
 	}
 
 	ret = ath11k_dp_rx_pktlog_stop(ab, false);
 	if (ret) {
-		ath11k_warn(ab, "failed to stop dp rx pktlog during suspend: %d\n",
+		ath11k_warn(ab,
+			    "failed to stop dp rx pktlog during suspend: %d\n",
 			    ret);
 		return ret;
 	}
@@ -853,7 +878,8 @@ int ath11k_core_resume(struct ath11k_bas
 
 	ret = ath11k_hif_resume(ab);
 	if (ret) {
-		ath11k_warn(ab, "failed to resume hif during resume: %d\n", ret);
+		ath11k_warn(ab, "failed to resume hif during resume: %d\n",
+			    ret);
 		return ret;
 	}
 
@@ -869,7 +895,8 @@ int ath11k_core_resume(struct ath11k_bas
 
 	ret = ath11k_wow_wakeup(ab);
 	if (ret) {
-		ath11k_warn(ab, "failed to wakeup wow during resume: %d\n", ret);
+		ath11k_warn(ab, "failed to wakeup wow during resume: %d\n",
+			    ret);
 		return ret;
 	}
 
@@ -877,7 +904,8 @@ int ath11k_core_resume(struct ath11k_bas
 }
 EXPORT_SYMBOL(ath11k_core_resume);
 
-static void ath11k_core_check_cc_code_bdfext(const struct dmi_header *hdr, void *data)
+static void ath11k_core_check_cc_code_bdfext(const struct dmi_header *hdr,
+					     void *data)
 {
 	struct ath11k_base *ab = data;
 	const char *magic = ATH11K_SMBIOS_BDF_EXT_MAGIC;
@@ -914,7 +942,8 @@ static void ath11k_core_check_cc_code_bd
 		ath11k_dbg(ab, ATH11K_DBG_BOOT, "smbios worldwide regdomain\n");
 		break;
 	default:
-		ath11k_dbg(ab, ATH11K_DBG_BOOT, "ignore smbios country code setting %d\n",
+		ath11k_dbg(ab, ATH11K_DBG_BOOT,
+			   "ignore smbios country code setting %d\n",
 			   smbios->country_code_flag);
 		break;
 	}
@@ -922,7 +951,8 @@ static void ath11k_core_check_cc_code_bd
 	spin_unlock_bh(&ab->base_lock);
 
 	if (!smbios->bdf_enabled) {
-		ath11k_dbg(ab, ATH11K_DBG_BOOT, "bdf variant name not found.\n");
+		ath11k_dbg(ab, ATH11K_DBG_BOOT,
+			   "bdf variant name not found.\n");
 		return;
 	}
 
@@ -933,22 +963,26 @@ static void ath11k_core_check_cc_code_bd
 		return;
 	}
 
-	len = min_t(size_t,
-		    strlen(smbios->bdf_ext), sizeof(ab->qmi.target.bdf_ext));
+	len = min_t(size_t, strlen(smbios->bdf_ext),
+		    sizeof(ab->qmi.target.bdf_ext));
 	for (i = 0; i < len; i++) {
-		if (!isascii(smbios->bdf_ext[i]) || !isprint(smbios->bdf_ext[i])) {
-			ath11k_dbg(ab, ATH11K_DBG_BOOT,
-				   "bdf variant name contains non ascii chars.\n");
+		if (!isascii(smbios->bdf_ext[i]) ||
+		    !isprint(smbios->bdf_ext[i])) {
+			ath11k_dbg(
+				ab, ATH11K_DBG_BOOT,
+				"bdf variant name contains non ascii chars.\n");
 			return;
 		}
 	}
 
 	/* Copy extension name without magic prefix */
-	copied = strscpy(ab->qmi.target.bdf_ext, smbios->bdf_ext + strlen(magic),
+	copied = strscpy(ab->qmi.target.bdf_ext,
+			 smbios->bdf_ext + strlen(magic),
 			 sizeof(ab->qmi.target.bdf_ext));
 	if (copied < 0) {
-		ath11k_dbg(ab, ATH11K_DBG_BOOT,
-			   "bdf variant string is longer than the buffer can accommodate\n");
+		ath11k_dbg(
+			ab, ATH11K_DBG_BOOT,
+			"bdf variant string is longer than the buffer can accommodate\n");
 		return;
 	}
 
@@ -984,9 +1018,10 @@ int ath11k_core_check_dt(struct ath11k_b
 		return -ENODATA;
 
 	if (strscpy(ab->qmi.target.bdf_ext, variant, max_len) < 0)
-		ath11k_dbg(ab, ATH11K_DBG_BOOT,
-			   "bdf variant string is longer than the buffer can accommodate (variant: %s)\n",
-			    variant);
+		ath11k_dbg(
+			ab, ATH11K_DBG_BOOT,
+			"bdf variant string is longer than the buffer can accommodate (variant: %s)\n",
+			variant);
 
 	return 0;
 }
@@ -1012,24 +1047,20 @@ static int __ath11k_core_create_board_na
 	case ATH11K_BDF_SEARCH_BUS_AND_BOARD:
 		switch (name_type) {
 		case ATH11K_BDF_NAME_FULL:
-			scnprintf(name, name_len,
-				  "bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
-				  ath11k_bus_str(ab->hif.bus),
-				  ab->id.vendor, ab->id.device,
-				  ab->id.subsystem_vendor,
-				  ab->id.subsystem_device,
-				  ab->qmi.target.chip_id,
-				  ab->qmi.target.board_id,
-				  variant);
+			scnprintf(
+				name, name_len,
+				"bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
+				ath11k_bus_str(ab->hif.bus), ab->id.vendor,
+				ab->id.device, ab->id.subsystem_vendor,
+				ab->id.subsystem_device, ab->qmi.target.chip_id,
+				ab->qmi.target.board_id, variant);
 			break;
 		case ATH11K_BDF_NAME_BUS_NAME:
-			scnprintf(name, name_len,
-				  "bus=%s",
+			scnprintf(name, name_len, "bus=%s",
 				  ath11k_bus_str(ab->hif.bus));
 			break;
 		case ATH11K_BDF_NAME_CHIP_ID:
-			scnprintf(name, name_len,
-				  "bus=%s,qmi-chip-id=%d",
+			scnprintf(name, name_len, "bus=%s,qmi-chip-id=%d",
 				  ath11k_bus_str(ab->hif.bus),
 				  ab->qmi.target.chip_id);
 			break;
@@ -1038,8 +1069,7 @@ static int __ath11k_core_create_board_na
 	default:
 		scnprintf(name, name_len,
 			  "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
-			  ath11k_bus_str(ab->hif.bus),
-			  ab->qmi.target.chip_id,
+			  ath11k_bus_str(ab->hif.bus), ab->qmi.target.chip_id,
 			  ab->qmi.target.board_id, variant);
 		break;
 	}
@@ -1056,22 +1086,22 @@ static int ath11k_core_create_board_name
 					       ATH11K_BDF_NAME_FULL);
 }
 
-static int ath11k_core_create_fallback_board_name(struct ath11k_base *ab, char *name,
-						  size_t name_len)
+static int ath11k_core_create_fallback_board_name(struct ath11k_base *ab,
+						  char *name, size_t name_len)
 {
 	return __ath11k_core_create_board_name(ab, name, name_len, false,
 					       ATH11K_BDF_NAME_FULL);
 }
 
-static int ath11k_core_create_bus_type_board_name(struct ath11k_base *ab, char *name,
-						  size_t name_len)
+static int ath11k_core_create_bus_type_board_name(struct ath11k_base *ab,
+						  char *name, size_t name_len)
 {
 	return __ath11k_core_create_board_name(ab, name, name_len, false,
 					       ATH11K_BDF_NAME_BUS_NAME);
 }
 
-static int ath11k_core_create_chip_id_board_name(struct ath11k_base *ab, char *name,
-						 size_t name_len)
+static int ath11k_core_create_chip_id_board_name(struct ath11k_base *ab,
+						 char *name, size_t name_len)
 {
 	return __ath11k_core_create_board_name(ab, name, name_len, false,
 					       ATH11K_BDF_NAME_CHIP_ID);
@@ -1093,8 +1123,8 @@ const struct firmware *ath11k_core_firmw
 	if (ret)
 		return ERR_PTR(ret);
 
-	ath11k_dbg(ab, ATH11K_DBG_BOOT, "firmware request %s size %zu\n",
-		   path, fw->size);
+	ath11k_dbg(ab, ATH11K_DBG_BOOT, "firmware request %s size %zu\n", path,
+		   fw->size);
 
 	return fw;
 }
@@ -1110,10 +1140,8 @@ void ath11k_core_free_bdf(struct ath11k_
 static int ath11k_core_parse_bd_ie_board(struct ath11k_base *ab,
 					 struct ath11k_board_data *bd,
 					 const void *buf, size_t buf_len,
-					 const char *boardname,
-					 int ie_id,
-					 int name_id,
-					 int data_id)
+					 const char *boardname, int ie_id,
+					 int name_id, int data_id)
 {
 	const struct ath11k_fw_ie *hdr;
 	bool name_match_found;
@@ -1135,8 +1163,8 @@ static int ath11k_core_parse_bd_ie_board
 
 		if (buf_len < ALIGN(board_ie_len, 4)) {
 			ath11k_err(ab, "invalid %s length: %zu < %zu\n",
-				   ath11k_bd_ie_type_str(ie_id),
-				   buf_len, ALIGN(board_ie_len, 4));
+				   ath11k_bd_ie_type_str(ie_id), buf_len,
+				   ALIGN(board_ie_len, 4));
 			ret = -EINVAL;
 			goto out;
 		}
@@ -1148,24 +1176,22 @@ static int ath11k_core_parse_bd_ie_board
 			if (board_ie_len != strlen(boardname))
 				goto next;
 
-			ret = memcmp(board_ie_data, boardname, strlen(boardname));
+			ret = memcmp(board_ie_data, boardname,
+				     strlen(boardname));
 			if (ret)
 				goto next;
 
 			name_match_found = true;
 			ath11k_dbg(ab, ATH11K_DBG_BOOT,
 				   "found match %s for name '%s'",
-				   ath11k_bd_ie_type_str(ie_id),
-				   boardname);
+				   ath11k_bd_ie_type_str(ie_id), boardname);
 		} else if (board_ie_id == data_id) {
 			if (!name_match_found)
 				/* no match found */
 				goto next;
 
-			ath11k_dbg(ab, ATH11K_DBG_BOOT,
-				   "found %s for '%s'",
-				   ath11k_bd_ie_type_str(ie_id),
-				   boardname);
+			ath11k_dbg(ab, ATH11K_DBG_BOOT, "found %s for '%s'",
+				   ath11k_bd_ie_type_str(ie_id), boardname);
 
 			bd->data = board_ie_data;
 			bd->len = board_ie_len;
@@ -1174,8 +1200,7 @@ static int ath11k_core_parse_bd_ie_board
 			goto out;
 		} else {
 			ath11k_warn(ab, "unknown %s id found: %d\n",
-				    ath11k_bd_ie_type_str(ie_id),
-				    board_ie_id);
+				    ath11k_bd_ie_type_str(ie_id), board_ie_id);
 		}
 next:
 		/* jump over the padding */
@@ -1195,8 +1220,7 @@ out:
 static int ath11k_core_fetch_board_data_api_n(struct ath11k_base *ab,
 					      struct ath11k_board_data *bd,
 					      const char *boardname,
-					      int ie_id_match,
-					      int name_id,
+					      int ie_id_match, int name_id,
 					      int data_id)
 {
 	size_t len, magic_len;
@@ -1217,14 +1241,16 @@ static int ath11k_core_fetch_board_data_
 	data = bd->fw->data;
 	len = bd->fw->size;
 
-	ath11k_core_create_firmware_path(ab, filename,
-					 filepath, sizeof(filepath));
+	ath11k_core_create_firmware_path(ab, filename, filepath,
+					 sizeof(filepath));
 
 	/* magic has extra null byte padded */
 	magic_len = strlen(ATH11K_BOARD_MAGIC) + 1;
 	if (len < magic_len) {
-		ath11k_err(ab, "failed to find magic value in %s, file too short: %zu\n",
-			   filepath, len);
+		ath11k_err(
+			ab,
+			"failed to find magic value in %s, file too short: %zu\n",
+			filepath, len);
 		ret = -EINVAL;
 		goto err;
 	}
@@ -1238,8 +1264,10 @@ static int ath11k_core_fetch_board_data_
 	/* magic is padded to 4 bytes */
 	magic_len = ALIGN(magic_len, 4);
 	if (len < magic_len) {
-		ath11k_err(ab, "failed: %s too small to contain board data, len: %zu\n",
-			   filepath, len);
+		ath11k_err(
+			ab,
+			"failed: %s too small to contain board data, len: %zu\n",
+			filepath, len);
 		ret = -EINVAL;
 		goto err;
 	}
@@ -1256,19 +1284,19 @@ static int ath11k_core_fetch_board_data_
 		data = hdr->data;
 
 		if (len < ALIGN(ie_len, 4)) {
-			ath11k_err(ab, "invalid length for board ie_id %d ie_len %zu len %zu\n",
-				   ie_id, ie_len, len);
+			ath11k_err(
+				ab,
+				"invalid length for board ie_id %d ie_len %zu len %zu\n",
+				ie_id, ie_len, len);
 			ret = -EINVAL;
 			goto err;
 		}
 
 		if (ie_id == ie_id_match) {
 			ret = ath11k_core_parse_bd_ie_board(ab, bd, data,
-							    ie_len,
-							    boardname,
+							    ie_len, boardname,
 							    ie_id_match,
-							    name_id,
-							    data_id);
+							    name_id, data_id);
 			if (ret == -ENOENT)
 				/* no match found, continue */
 				goto next;
@@ -1290,8 +1318,8 @@ out:
 	if (!bd->data || !bd->len) {
 		ath11k_dbg(ab, ATH11K_DBG_BOOT,
 			   "failed to fetch %s for %s from %s\n",
-			   ath11k_bd_ie_type_str(ie_id_match),
-			   boardname, filepath);
+			   ath11k_bd_ie_type_str(ie_id_match), boardname,
+			   filepath);
 		ret = -ENODATA;
 		goto err;
 	}
@@ -1321,7 +1349,8 @@ int ath11k_core_fetch_board_data_api_1(s
 #define BOARD_NAME_SIZE 200
 int ath11k_core_fetch_bdf(struct ath11k_base *ab, struct ath11k_board_data *bd)
 {
-	char *boardname = NULL, *fallback_boardname = NULL, *chip_id_boardname = NULL;
+	char *boardname = NULL, *fallback_boardname = NULL,
+	     *chip_id_boardname = NULL;
 	char *filename, filepath[100];
 	int ret = 0;
 
@@ -1388,15 +1417,18 @@ int ath11k_core_fetch_bdf(struct ath11k_
 		goto exit;
 
 	ab->bd_api = 1;
-	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_DEFAULT_BOARD_FILE);
+	ret = ath11k_core_fetch_board_data_api_1(ab, bd,
+						 ATH11K_DEFAULT_BOARD_FILE);
 	if (ret) {
-		ath11k_core_create_firmware_path(ab, filename,
-						 filepath, sizeof(filepath));
+		ath11k_core_create_firmware_path(ab, filename, filepath,
+						 sizeof(filepath));
 		ath11k_err(ab, "failed to fetch board data for %s from %s\n",
 			   boardname, filepath);
 		if (memcmp(boardname, fallback_boardname, strlen(boardname)))
-			ath11k_err(ab, "failed to fetch board data for %s from %s\n",
-				   fallback_boardname, filepath);
+			ath11k_err(
+				ab,
+				"failed to fetch board data for %s from %s\n",
+				fallback_boardname, filepath);
 
 		ath11k_err(ab, "failed to fetch board data for %s from %s\n",
 			   chip_id_boardname, filepath);
@@ -1411,12 +1443,14 @@ exit:
 	kfree(chip_id_boardname);
 
 	if (!ret)
-		ath11k_dbg(ab, ATH11K_DBG_BOOT, "using board api %d\n", ab->bd_api);
+		ath11k_dbg(ab, ATH11K_DBG_BOOT, "using board api %d\n",
+			   ab->bd_api);
 
 	return ret;
 }
 
-int ath11k_core_fetch_regdb(struct ath11k_base *ab, struct ath11k_board_data *bd)
+int ath11k_core_fetch_regdb(struct ath11k_base *ab,
+			    struct ath11k_board_data *bd)
 {
 	char boardname[BOARD_NAME_SIZE], default_boardname[BOARD_NAME_SIZE];
 	int ret;
@@ -1439,7 +1473,8 @@ int ath11k_core_fetch_regdb(struct ath11
 						     BOARD_NAME_SIZE);
 	if (ret) {
 		ath11k_dbg(ab, ATH11K_DBG_BOOT,
-			   "failed to create default board name for regdb: %d", ret);
+			   "failed to create default board name for regdb: %d",
+			   ret);
 		goto exit;
 	}
 
@@ -1450,7 +1485,8 @@ int ath11k_core_fetch_regdb(struct ath11
 	if (!ret)
 		goto exit;
 
-	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_REGDB_FILE_NAME);
+	ret = ath11k_core_fetch_board_data_api_1(ab, bd,
+						 ATH11K_REGDB_FILE_NAME);
 	if (ret)
 		ath11k_dbg(ab, ATH11K_DBG_BOOT, "failed to fetch %s from %s\n",
 			   ATH11K_REGDB_FILE_NAME, ab->hw_params.fw.dir);
@@ -1542,14 +1578,14 @@ static int ath11k_core_pdev_create(struc
 
 	ret = ath11k_mac_register(ab);
 	if (ret) {
-		ath11k_err(ab, "failed register the radio with mac80211: %d\n", ret);
+		ath11k_err(ab, "failed register the radio with mac80211: %d\n",
+			   ret);
 		goto err_nss_tear;
 	}
 
 	ret = ath11k_thermal_register(ab);
 	if (ret) {
-		ath11k_err(ab, "could not register thermal device: %d\n",
-			   ret);
+		ath11k_err(ab, "could not register thermal device: %d\n", ret);
 		goto err_mac_unregister;
 	}
 
@@ -1637,14 +1673,16 @@ static int ath11k_core_start(struct ath1
 
 	ret = ath11k_wmi_wait_for_service_ready(ab);
 	if (ret) {
-		ath11k_err(ab, "failed to receive wmi service ready event: %d\n",
+		ath11k_err(ab,
+			   "failed to receive wmi service ready event: %d\n",
 			   ret);
 		goto err_hif_stop;
 	}
 
 	ret = ath11k_mac_allocate(ab);
 	if (ret) {
-		ath11k_err(ab, "failed to create new hw device with mac80211 :%d\n",
+		ath11k_err(ab,
+			   "failed to create new hw device with mac80211 :%d\n",
 			   ret);
 		goto err_hif_stop;
 	}
@@ -1653,7 +1691,9 @@ static int ath11k_core_start(struct ath1
 
 	ret = ath11k_dp_pdev_reo_setup(ab);
 	if (ret) {
-		ath11k_err(ab, "failed to initialize reo destination rings: %d\n", ret);
+		ath11k_err(ab,
+			   "failed to initialize reo destination rings: %d\n",
+			   ret);
 		goto err_mac_destroy;
 	}
 
@@ -1665,13 +1705,15 @@ static int ath11k_core_start(struct ath1
 
 	ret = ath11k_wmi_wait_for_unified_ready(ab);
 	if (ret) {
-		ath11k_err(ab, "failed to receive wmi unified ready event: %d\n",
+		ath11k_err(ab,
+			   "failed to receive wmi unified ready event: %d\n",
 			   ret);
 		goto err_reo_cleanup;
 	}
 
 	/* put hardware to DBS mode */
-	if (ab->hw_params.single_pdev_only && ab->hw_params.num_rxmda_per_pdev > 1) {
+	if (ab->hw_params.single_pdev_only &&
+	    ab->hw_params.num_rxmda_per_pdev > 1) {
 		ret = ath11k_wmi_set_hw_mode(ab, WMI_HOST_HW_MODE_DBS);
 		if (ret) {
 			ath11k_err(ab, "failed to send dbs mode: %d\n", ret);
@@ -1681,7 +1723,8 @@ static int ath11k_core_start(struct ath1
 
 	ret = ath11k_dp_tx_htt_h2t_ver_req_msg(ab);
 	if (ret) {
-		ath11k_err(ab, "failed to send htt version request message: %d\n",
+		ath11k_err(ab,
+			   "failed to send htt version request message: %d\n",
 			   ret);
 		goto err_reo_cleanup;
 	}
@@ -1749,7 +1792,8 @@ int ath11k_core_qmi_firmware_ready(struc
 		clear_bit(ATH11K_FLAG_RAW_MODE, &ab->dev_flags);
 		break;
 	default:
-		ath11k_info(ab, "invalid crypto_mode: %d\n", ath11k_crypto_mode);
+		ath11k_info(ab, "invalid crypto_mode: %d\n",
+			    ath11k_crypto_mode);
 		return -EINVAL;
 	}
 
@@ -1850,7 +1894,8 @@ void ath11k_core_halt(struct ath11k *ar)
 
 static void ath11k_update_11d(struct work_struct *work)
 {
-	struct ath11k_base *ab = container_of(work, struct ath11k_base, update_11d_work);
+	struct ath11k_base *ab =
+		container_of(work, struct ath11k_base, update_11d_work);
 	struct ath11k *ar;
 	struct ath11k_pdev *pdev;
 	struct wmi_set_current_country_params set_current_param = {};
@@ -1861,19 +1906,20 @@ static void ath11k_update_11d(struct wor
 	spin_unlock_bh(&ab->base_lock);
 
 	ath11k_dbg(ab, ATH11K_DBG_WMI, "update 11d new cc %c%c\n",
-		   set_current_param.alpha2[0],
-		   set_current_param.alpha2[1]);
+		   set_current_param.alpha2[0], set_current_param.alpha2[1]);
 
 	for (i = 0; i < ab->num_radios; i++) {
 		pdev = &ab->pdevs[i];
 		ar = pdev->ar;
 
 		memcpy(&ar->alpha2, &set_current_param.alpha2, 2);
-		ret = ath11k_wmi_send_set_current_country_cmd(ar, &set_current_param);
+		ret = ath11k_wmi_send_set_current_country_cmd(
+			ar, &set_current_param);
 		if (ret)
-			ath11k_warn(ar->ab,
-				    "pdev id %d failed set current country code: %d\n",
-				    i, ret);
+			ath11k_warn(
+				ar->ab,
+				"pdev id %d failed set current country code: %d\n",
+				i, ret);
 	}
 }
 
@@ -1910,8 +1956,8 @@ void ath11k_core_pre_reconfigure_recover
 		complete(&ar->thermal.wmi_sync);
 
 		wake_up(&ar->dp.tx_empty_waitq);
-		idr_for_each(&ar->txmgmt_idr,
-			     ath11k_mac_tx_mgmt_pending_free, ar);
+		idr_for_each(&ar->txmgmt_idr, ath11k_mac_tx_mgmt_pending_free,
+			     ar);
 		idr_destroy(&ar->txmgmt_idr);
 		wake_up(&ar->txmgmt_empty_waitq);
 
@@ -1947,9 +1993,10 @@ static void ath11k_core_post_reconfigure
 			ieee80211_restart_hw(ar->hw);
 			break;
 		case ATH11K_STATE_OFF:
-			ath11k_warn(ab,
-				    "cannot restart radio %d that hasn't been started\n",
-				    i);
+			ath11k_warn(
+				ab,
+				"cannot restart radio %d that hasn't been started\n",
+				i);
 			break;
 		case ATH11K_STATE_RESTARTING:
 			break;
@@ -1957,8 +2004,10 @@ static void ath11k_core_post_reconfigure
 			ar->state = ATH11K_STATE_WEDGED;
 			fallthrough;
 		case ATH11K_STATE_WEDGED:
-			ath11k_warn(ab,
-				    "device is wedged, will not restart radio %d\n", i);
+			ath11k_warn(
+				ab,
+				"device is wedged, will not restart radio %d\n",
+				i);
 			break;
 		case ATH11K_STATE_FTM:
 			ath11k_dbg(ab, ATH11K_DBG_TESTMODE,
@@ -1973,12 +2022,14 @@ static void ath11k_core_post_reconfigure
 
 static void ath11k_core_restart(struct work_struct *work)
 {
-	struct ath11k_base *ab = container_of(work, struct ath11k_base, restart_work);
+	struct ath11k_base *ab =
+		container_of(work, struct ath11k_base, restart_work);
 	int ret;
 
 	ret = ath11k_core_reconfigure_on_crash(ab);
 	if (ret) {
-		ath11k_err(ab, "failed to reconfigure driver on crash recovery\n");
+		ath11k_err(ab,
+			   "failed to reconfigure driver on crash recovery\n");
 		return;
 	}
 
@@ -1991,12 +2042,14 @@ static void ath11k_core_restart(struct w
 
 static void ath11k_core_reset(struct work_struct *work)
 {
-	struct ath11k_base *ab = container_of(work, struct ath11k_base, reset_work);
+	struct ath11k_base *ab =
+		container_of(work, struct ath11k_base, reset_work);
 	int reset_count, fail_cont_count;
 	long time_left;
 
 	if (!(test_bit(ATH11K_FLAG_REGISTERED, &ab->dev_flags))) {
-		ath11k_warn(ab, "ignore reset dev flags 0x%lx\n", ab->dev_flags);
+		ath11k_warn(ab, "ignore reset dev flags 0x%lx\n",
+			    ab->dev_flags);
 		return;
 	}
 
@@ -2022,8 +2075,8 @@ static void ath11k_core_reset(struct wor
 		ath11k_warn(ab, "already resetting count %d\n", reset_count);
 
 		reinit_completion(&ab->reset_complete);
-		time_left = wait_for_completion_timeout(&ab->reset_complete,
-							ATH11K_RESET_TIMEOUT_HZ);
+		time_left = wait_for_completion_timeout(
+			&ab->reset_complete, ATH11K_RESET_TIMEOUT_HZ);
 
 		if (time_left) {
 			ath11k_dbg(ab, ATH11K_DBG_BOOT, "to skip reset\n");
@@ -2050,8 +2103,8 @@ static void ath11k_core_reset(struct wor
 
 	ath11k_dbg(ab, ATH11K_DBG_BOOT, "waiting recovery start...\n");
 
-	time_left = wait_for_completion_timeout(&ab->recovery_start,
-						ATH11K_RECOVER_START_TIMEOUT_HZ);
+	time_left = wait_for_completion_timeout(
+		&ab->recovery_start, ATH11K_RECOVER_START_TIMEOUT_HZ);
 
 	ath11k_hif_power_down(ab);
 	ath11k_hif_power_up(ab);
@@ -2073,22 +2126,21 @@ static int ath11k_init_hw_params(struct
 	}
 
 	if (i == ARRAY_SIZE(ath11k_hw_params)) {
-		ath11k_err(ab, "Unsupported hardware version: 0x%x\n", ab->hw_rev);
+		ath11k_err(ab, "Unsupported hardware version: 0x%x\n",
+			   ab->hw_rev);
 		return -EINVAL;
 	}
 
 	ab->hw_params = *hw_params;
 
 	ret = of_property_read_u32(ab->dev->of_node,
-				   "qcom,ath11k-fw-memory-mode",
-				   &fw_mem_mode);
+				   "qcom,ath11k-fw-memory-mode", &fw_mem_mode);
 	if (!ret) {
 		if (fw_mem_mode == 0) {
 			ab->hw_params.fw_mem_mode = 0;
 			ab->hw_params.num_vdevs = 16 + 1;
 			ab->hw_params.num_peers = 512;
-		}
-		else if (fw_mem_mode == 1) {
+		} else if (fw_mem_mode == 1) {
 			ab->hw_params.fw_mem_mode = 1;
 			ab->hw_params.num_vdevs = 8;
 			ab->hw_params.num_peers = 128;
@@ -2099,7 +2151,8 @@ static int ath11k_init_hw_params(struct
 			ab->hw_params.coldboot_cal_mm = false;
 			ab->hw_params.coldboot_cal_ftm = false;
 		} else
-			ath11k_info(ab, "Unsupported FW memory mode: %u\n", fw_mem_mode);
+			ath11k_info(ab, "Unsupported FW memory mode: %u\n",
+				    fw_mem_mode);
 	}
 
 	ath11k_info(ab, "%s\n", ab->hw_params.name);
@@ -2215,5 +2268,6 @@ err_sc_free:
 }
 EXPORT_SYMBOL(ath11k_core_alloc);
 
-MODULE_DESCRIPTION("Core module for Qualcomm Atheros 802.11ax wireless LAN cards.");
+MODULE_DESCRIPTION(
+	"Core module for Qualcomm Atheros 802.11ax wireless LAN cards.");
 MODULE_LICENSE("Dual BSD/GPL");
